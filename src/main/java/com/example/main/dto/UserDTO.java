package com.example.main.dto;

import com.example.main.model.Role;
import com.example.main.model.User;

import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.NoArgsConstructor;

/**
 * DTO for user response, excluding sensitive info like password hash.
 */
@Data
@NoArgsConstructor
@AllArgsConstructor
public class UserDTO {
    private Long id;
    private String email;
    private Role role;
    private String firstName;
    private String lastName;
    private boolean isActive;
    
 // --- Conversion Methods ---

    /**
     * Converts this UserDTO to a User entity.
     * This is primarily useful when a UserDTO might be used for updates where
     * only certain fields are sent. Note that the password will not be set here,
     * as this DTO specifically excludes it. Password handling (hashing, setting)
     * should occur in the service layer when creating or updating a user.
     *
     * @return A User entity populated with data from this DTO (excluding password).
     */
    public User toEntity() {
        User user = new User();
        user.setId(this.id); // ID might be null for new users, set by DB or updated via DTO
        user.setEmail(this.email);
        user.setRole(this.role);
        user.setFirstName(this.firstName);
        user.setLastName(this.lastName);
        user.setActive(this.isActive);
        // Password is intentionally NOT set here as it's not part of UserDTO
        return user;
    }

    /**
     * Creates a UserDTO from a User entity.
     * This is the primary use case for this DTO: sending user data from the backend
     * to the frontend while omitting sensitive information like the password.
     *
     * @param user The User entity to convert.
     * @return A UserDTO populated with data from the entity (excluding password).
     */
    public static UserDTO fromEntity(User user) {
        if (user == null) {
            return null;
        }

        // Using the AllArgsConstructor generated by Lombok for concise creation
        return new UserDTO(
            user.getId(),
            user.getEmail(),
            user.getRole(),
            user.getFirstName(),
            user.getLastName(),
            user.isActive()
        );
    }
}
